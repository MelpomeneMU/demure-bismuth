@@ TODO: Redo gear the way we did Upgrades. Beware of the Leech's potions, those get weird.

&f.get-player-load-list [v(d.cgf)]=if(t(finditem(ulocal(f.get-player-stat, %0, abilities), Mule, |)), Light:|1-5|Normal:|6-7|Heavy:|8|Encumbered:|9, Light:|1-3|Normal:|4-5|Heavy:|6|Encumbered:|7-9)

&f.get-max-player-load [v(d.cgf)]=if(t(finditem(ulocal(f.get-player-stat, %0, abilities), Mule, |)), switch(%1, Normal, 7, Heavy, 8, Encumbered, 9, 5), switch(%1, Normal, 5, Heavy, 6, Encumbered, 9, 3))

@@ %0 - list
@@ %1 - return marked
@@ %2 - return unmarked
@@ %3 - return tagged
@@ %4 - return untagged
&f.get-gear-list [v(d.cgf)]=strcat(setq(L, iter(%0, strcat(setq(W, inc(words(itext(0)))), extract(itext(0), switch(itext(0), %[X%]*, if(%1, 3, %qW), %[ %]*, if(%2, 4, %qW), if(%2, 2, %qW)), dec(%qW))), |, |)), null(setq(L, iter(%qL, if(match(itext(0), * %[*%], |), if(%3, itext(0)), if(%4, itext(0))), |, |))), iter(%qL, remove(itext(0), edit(graball(itext(0), %[*%]),, %[X%],)), |, |))

&f.get-gear-load [v(d.cgf)]=strcat(null(iter(%0, if(cand(not(t(%qX)), match(extract(itext(0), switch(itext(0), %[X%]*, 3, %[ %], 4, 2), words(itext(0))), %1, |)), setq(X, extract(itext(0), switch(itext(0), %[X%]*, 2, %[ %], 3, 1), 1))), |, |)), edit(%qX, L,))

&f.get-player-load [v(d.cgf)]=ladd(iter(%0, switch(itext(0), %[X%]*, edit(extract(itext(0), 2, 1), L,)), |, |), |)

&c.+gear [v(d.cg)]=$+gear:@pemit %#=ulocal(layout.subsection, gear, %#, %#, 1);

&c.+gear/load [v(d.cg)]=$+gear/load *:@assert t(setr(V, ulocal(f.get-valid-value, load, setr(0, first(%0, =)))))={ @trigger me/tr.error=%#, '%q0' is not a valid value for Load. Valid values are: [itemize(ulocal(f.list-valid-values, load), |)]; }; @assert cand(lte(sub(secs(), first(setr(D, xget(%#, _stat.change-gear-load)), |)), 600), match(rest(%0, =), YES), match(%qV, rest(%qD, |), |))={ @set %#=_stat.change-gear-load:[secs()]|%qV; @trigger me/tr.message=%#, This will change your gear load to %qV and remove all your marks and tags. Are you sure? If so%, type %ch+gear/load %qV=YES%cn within the next 10 minutes. It is now [prettytime()].; }; @wipe %#/_stat.change-gear-load; @set %#=[ulocal(f.get-stat-location-on-player, load)]:%qV; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, standard gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, other gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, standard gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, other gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, sets [poss(%#)] loadout to %ch%qV%cn and clears [poss(%#)] gear list of marks and tags. [ulocal(layout.load-desc, %#)]);

&c.+gear/mark [v(d.cg)]=$+gear/mark *:@assert t(setr(L, ulocal(f.get-player-stat, %#, gear)))={ @trigger me/tr.error=%#, You don't have any gear to mark yet.; }; @assert t(setr(M, ulocal(f.get-max-player-load, %#, setr(I, ulocal(f.get-player-stat, %#, load)))))={ @trigger me/tr.error=%#, You should pick your loadout first. +gear/load <Light, Normal, Heavy, or Encumbered>.; }; @assert cor(t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 0, 1, 1, 1, setq(S, gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, if(t(setr(L, ulocal(f.get-player-stat, %#, standard gear))), %qL, xget(%vD, d.standard_gear))), 0, 1, 1, 1, setq(S, standard gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, ulocal(f.get-player-stat, %#, other gear)), 0, 1, 1, 1, setq(S, other gear)), %0, |))))={ @trigger me/tr.error=%#, Could not find an unmarked piece of gear on your +gear list starting with '%0'.; }; @assert t(strlen(setr(O, ulocal(f.get-gear-load, %qL, %qG))))={ @trigger me/tr.error=%#, This gear is not properly set up and cannot be brought along.; }; @assert gt(%qM, add(%qO, ulocal(f.get-player-load, %#)))={ @trigger me/tr.error=%#, Marking this item would take you over your current Loadout of %ch%qI%cn.; }; @set %#=ulocal(f.get-stat-location-on-player, %qS):[iter(%qL, switch(itext(0), %[X%]*, itext(0), %[ %]*, if(cand(not(t(%qX)), match(extract(itext(0), 4, words(itext(0))), %qG, |)), edit(itext(0), %[ %], %[X%])[setq(X, 1)], itext(0)), if(cand(not(t(%qX)), match(rest(itext(0)), %qG, |)), edit(itext(0), ^, %[X%]%b)[setq(X, 1)], itext(0))), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, marks [poss(%#)] %ch%qG%cn %qS as present for this score.);

&c.+gear/unmark [v(d.cg)]=$+gear/unmark *:@assert t(setr(L, ulocal(f.get-player-stat, %#, gear)))={ @trigger me/tr.error=%#, You don't have any gear to unmark yet.; }; @assert cor(strmatch(%0, all), t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 1, 0, 1, 1, setq(S, gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, if(t(setr(L, ulocal(f.get-player-stat, %#, standard gear))), %qL, xget(%vD, d.standard_gear))), 1, 0, 1, 1, setq(S, standard gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, ulocal(f.get-player-stat, %#, other gear)), 1, 0, 1, 1, setq(S, other gear)), %0, |))))={ @trigger me/tr.error=%#, Could not find a marked piece of gear on your +gear list starting with '%0'.; }; @assert t(%qS)={ @set %#=[setr(X, ulocal(f.get-stat-location-on-player, gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, standard gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, other gear))]:[edit(xget(%#, %qX), %[X%]%b,)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, unmarks all [poss(%#)] gear - it is no longer present for this score.); }; @set %#=ulocal(f.get-stat-location-on-player, %qS):[iter(%qL, switch(itext(0), %[ %]*, itext(0), %[X%]*, if(cand(not(t(%qX)), match(extract(itext(0), 3, words(itext(0))), %qG, |)), edit(itext(0), %[X%], %[ %])[setq(X, 1)], itext(0)), if(cand(not(t(%qX)), match(rest(itext(0)), %qG, |)), edit(itext(0), ^, %[ %]%b)[setq(X, 1)], itext(0))), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, unmarks [poss(%#)] %qG gear - it is no longer present for this score.);

&c.+gear/tag [v(d.cg)]=$+gear/tag *=*:@assert t(setr(L, ulocal(f.get-player-stat, %#, gear)))={ @trigger me/tr.error=%#, You don't have any gear to tag yet.; }; @assert t(%1)={ @trigger me/tr.error=%#, Enter something to tag your gear with%, such as 'Broken' or 'Stolen'.; }; @assert lte(strlen(%1), 15)={ @trigger me/tr.error=%#, Gear tags cannot be longer than 15 characters.; };  @assert cor(t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 1, 1, 0, 1, setq(S, gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, if(t(setr(L, ulocal(f.get-player-stat, %#, standard gear))), %qL, xget(%vD, d.standard_gear))), 1, 1, 0, 1, setq(S, standard gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, ulocal(f.get-player-stat, %#, other gear)), 1, 1, 0, 1, setq(S, other gear)), %0, |))))={ @trigger me/tr.error=%#, Could not find a piece of untagged gear on your +gear list starting with '%0'.; }; @set %#=ulocal(f.get-stat-location-on-player, %qS):[iter(%qL, if(cand(not(t(%qX)), match(extract(edit(itext(0), edit(graball(itext(0), %[*%]), %[X%],),), switch(itext(0), %[X%]*, 3, %[ %]*, 4, 2), words(itext(0))), %qG, |)), setr(X, edit(itext(0), $, %b%[%1%])), itext(0)), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, tags [poss(%#)] %ch%qG%cn %qS as %ch%1%cn.);

&c.+gear/untag [v(d.cg)]=$+gear/untag *:@assert t(setr(L, ulocal(f.get-player-stat, %#, gear)))={ @trigger me/tr.error=%#, You don't have any gear to untag yet.; }; @assert t(%0)={ @trigger me/tr.error=%#, Enter something to untag%, or use 'all' to untag everything.; }; @assert cor(strmatch(%0, all), t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 1, 1, 1, 0, setq(S, gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, if(t(setr(L, ulocal(f.get-player-stat, %#, standard gear))), %qL, xget(%vD, d.standard_gear))), 1, 1, 1, 0, setq(S, standard gear)), %0, |))), t(setr(G, finditem(ulocal(f.get-gear-list, setr(L, ulocal(f.get-player-stat, %#, other gear)), 1, 1, 1, 0, setq(S, other gear)), %0, |))))={ @trigger me/tr.error=%#, Could not find a piece of tagged gear on your +gear list starting with '%0'.; }; @assert t(%qS)={ @set %#=[setr(X, ulocal(f.get-stat-location-on-player, gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, standard gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @set %#=[setr(X, ulocal(f.get-stat-location-on-player, other gear))]:[iter(xget(%#, %qX), remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],)), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, untags all [poss(%#)] gear.); }; @set %#=ulocal(f.get-stat-location-on-player, %qS):[iter(%qL, if(cand(not(t(%qX)), match(extract(edit(itext(0), edit(graball(itext(0), %[*%]), %[X%],),), switch(itext(0), %[X%]*, 3, %[ %]*, 4, 2), words(itext(0))), %qG, |)), setr(X, remove(itext(0), edit(graball(itext(0), %[*%]), %[X%],))), itext(0)), |, |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, untags [poss(%#)] %ch%qG%cn %qS.);

&c.+gear/drop [v(d.cg)]=$+gear/drop *:@assert t(setr(L, ulocal(f.get-player-stat, %#, other gear)))={ @trigger me/tr.error=%#, You don't have any gear to drop yet.; }; @assert t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 1, 1, 1, 1, setq(S, other gear)), setr(0, first(%0, =)), |)))={ @trigger me/tr.error=%#, Could not find a piece of other gear on your +gear list starting with '%q0'. Other gear is the only kind of gear you can drop - anything else%, you're able to get back (or get another of) after the score is over.; }; @assert cand(lte(sub(secs(), first(setr(D, xget(%#, _stat.gear-drop-request)), |)), 600), match(rest(%0, =), YES), match(%qG, rest(%qD, |), |))={ @set %#=_stat.gear-drop-request:[secs()]|%qG; @trigger me/tr.message=%#, This will remove your %qG other gear from your sheet. This action is permanent. Are you sure? If so%, type %ch+gear/drop %qG=YES%cn within the next 10 minutes. It is now [prettytime()].; }; @wipe %#/_stat.gear-drop-request; @set %#=ulocal(f.get-stat-location-on-player, %qS):[squish(trim(iter(%qL, if(cand(not(t(%qX)), match(extract(edit(itext(0), edit(graball(itext(0), %[*%]), %[X%],),), switch(itext(0), %[X%]*, 3, %[ %]*, 4, 2), words(itext(0))), %qG, |)), setq(X, 1), itext(0)), |, |), b, |), |)]; @trigger me/tr.remit-or-pemit=%#, ulocal(layout.room-emit, %#, drops [poss(%#)] %ch%qG%cn from [poss(%#)] sheet.);

&c.+gear/give [v(d.cg)]=$+gear/give *=*: @assert isstaff(%#)={ @trigger me/tr.error=%#, Only staff can give gear out. Open a job to request gear.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @assert regmatchi(%1, \[0-9\]L .+)={ @trigger me/tr.error=%#, Please use the format '#L <name>' - for example '0L Example Gear' for a piece of gear that has no Load.; }; @set %qP=[setr(X, ulocal(f.get-stat-location-on-player, other gear))]:[squish(trim(strcat(xget(%qP, %qX), |, ucstr(first(%1)), %b, rest(%1)), b, |), |)]; @trigger me/tr.success=%#, You grant [ulocal(f.get-name, %qP, %#)] [art(setr(G, rest(%1)))] %qG.;

&c.+gear/take [v(d.cg)]=$+gear/take *=*:@assert isstaff(%#)={ @trigger me/tr.error=%#, Only staff can give gear out. Open a job to request gear.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @assert t(setr(L, ulocal(f.get-player-stat, %qP, other gear)))={ @trigger me/tr.error=%#, ulocal(f.get-name, %qP, %#) doesn't have any gear to take yet.; }; @assert t(setr(G, finditem(ulocal(f.get-gear-list, %qL, 1, 1, 1, 1, setq(S, other gear)), %1, |)))={ @trigger me/tr.error=%#, Could not find a piece of other gear on [ulocal(f.get-name, %qP, %#)]'s +gear list starting with '%1'. Other gear is the only kind of gear you can take from a player - anything else%, they're able to get back (or get another of) after the score is over.; }; @set %#=ulocal(f.get-stat-location-on-player, %qS):[squish(trim(iter(%qL, if(cand(not(t(%qX)), match(extract(edit(itext(0), edit(graball(itext(0), %[*%]), %[X%],),), switch(itext(0), %[X%]*, 3, %[ %]*, 4, 2), words(itext(0))), %qG, |)), setq(X, 1), itext(0)), |, |), b, |), |)]; @trigger me/tr.success=%#, You take away [ulocal(f.get-name, %qP, %#)]'s %qG gear.; 

