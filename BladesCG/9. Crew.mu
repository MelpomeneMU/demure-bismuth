@@ TODO: +crew <name> doesn't work.

@@ TODO: Figure out a way to give a crew claims. +claim/award <name>=<blah> - but we also need to award claims that are mapped. +claim/award <name>=C1 for example.

&c.+crew [v(d.cg)]=$+crew*:@break switch(%0, /*, 1, * *, 1, 0); @force %#=+sheet/crew%0;

&c.+crew_player [v(d.cg)]=$+crew *:@force %#=+sheet/crew %0;

&c.+crew_all [v(d.cg)]=$+crew/all:@pemit %#=ulocal(layout.crew1, %#, %#); @pemit %#=ulocal(layout.subsection, crew2, %#, %#); @assert hasattr(%#, _stat.crew_locked)={ @pemit %#=strcat(%r, ulocal(layout.crew-cg-errors, %#, %#)); };

&c.+crew_all_player [v(d.cg)]=$+crew/all *: @assert isstaff(%#)={ @trigger me/tr.error=%#, You must be staff to view someone else's sheet.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @pemit %#=ulocal(layout.crew1, %qP, %#); @pemit %#=ulocal(layout.subsection, crew2, %qP, %#); @assert hasattr(%qP, _stat.crew_locked)={ @pemit %#=strcat(%r, ulocal(layout.crew-cg-errors, %qP, %#)); };

@@ TODO: Decide what other players see when they view a crew. Definitely crew name, reputation, maybe factions, etc, but what about members, cohorts? They will at least see that the person they're +crewing is a member of that crew... or maybe they can only look crews up by name? That might be better...

@@ TODO: Once the above is decided, make it possible for other players to +crew.

&c.+crew_page [v(d.cg)]=$+crew/*:@break cand(isstaff(%#), strmatch(%0, * *)); @break t(finditem(all|create|join|boot|leave|invite|transfer|lock|unlock|channel, first(%0), |)); @eval setq(V, if(member(1 2, %0), page%0, %0)); @assert t(setr(S, finditem(setr(L, xget(%vD, d.crew-sheet-sections)), %qV, |)))={ @trigger me/tr.error=%#, Could not find the section of the crew sheet starting with '%0'. Valid sections are 'all' or: [itemize(%qL, |)].; }; @eval setq(S, ulocal(f.get-stat-location, %qS)); @pemit %#=ulocal(layout.subsection, if(hasattrp(me, layout.crew-%qS), crew-%qS, %qS), %#, %#);

&c.+crew_page_player [v(d.cg)]=$+crew/* *:@break t(finditem(all|create|join|boot|leave|invite|transfer|lock|unlock|channel, first(%0), |)); @assert isstaff(%#)={ @trigger me/tr.error=%#, You must be staff to view someone else's sheet.; }; @assert t(setr(P, ulocal(f.find-player, %1, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%1'.; }; @eval setq(V, if(member(1 2, %0), page%0, %0)); @assert t(setr(S, finditem(setr(L, xget(%vD, d.crew-sheet-sections)), %qV, |)))={ @trigger me/tr.error=%#, Could not find the section of the crew sheet starting with '%0'. Valid sections are 'all' or: [itemize(%qL, |)].; }; @eval setq(S, ulocal(f.get-stat-location, %qS)); @pemit %#=ulocal(layout.subsection, if(hasattrp(me, layout.crew-%qS), crew-%qS, %qS), %qP, %#);

&c.+crew/create [v(d.cg)]=$+crew/create *:@break strmatch(%0, *=*); @assert not(isapproved(%#))={ @trigger me/tr.error=%#, You must be unapproved to create a new crew. Open a new +request to get unapproved and start working on it.; }; @assert cor(not(setr(C, ulocal(f.get-player-stat, %#, crew object))), t(member(%qC, %#)))={ @trigger me/tr.message=%#, This will take you out of your existing crew%, [ulocal(f.get-player-stat, %qC, Crew Name)]. If you're sure you want to proceed%, type '+crew/create %0=YES' within the next 15 minutes. The time is now [prettytime()].; @eval settimer(%#, crew.new, 900); }; @assert not(ulocal(f.has-crew-stats, %#))={ @trigger me/tr.message=%#, This will wipe your existing crew data. If you're sure you want to proceed%, type '+crew/create %0=YES' within the next 15 minutes. The time is now [prettytime()].; @eval settimer(%#, crew.new, 900); }; @set %#=[ulocal(f.get-stat-location-on-player, crew object)]:%#; @set %#=[ulocal(f.get-stat-location-on-player, crew name)]:%0; @set %#=[ulocal(f.get-next-id-attr, %#, _crew-join-%#-)]:[prettytime()]; @trigger me/tr.success=%#, You have started a new crew called '%0'.;

&c.+crew/create_YES [v(d.cg)]=$+crew/create *=*: @assert gettimer(%#, crew.new)={ @trigger me/tr.error=%#, Your timeout has expired or you didn't type '+crew/create %0' yet. Please try again.; }; @assert t(match(%1, YES))={ @trigger me/tr.error=%#, You must type 'YES' to proceed with overwriting your old crew.; }; @wipe %#/[ulocal(f.get-stat-location-on-player, crew*)]; @eval iter(ulocal(f.get-crew-stats), set(%#, ulocal(f.get-stat-location-on-player, itext(0)):), |); @set %#=[ulocal(f.get-stat-location-on-player, crew object)]:%#; @set %#=[ulocal(f.get-stat-location-on-player, crew name)]:%0; @set %#=[ulocal(f.get-next-id-attr, %#, _crew-join-%#-)]:[prettytime()]; @trigger me/tr.success=%#, You have started a new crew called '%0'. Be aware that recreating your crew does not get rid of crew members. You will need to '%ch+crew/boot <name>%cn' if you want to remove them. You can only boot probationary members.;

@@ TODO: See about making it so that ALL players who are non-probies have the power to boot/invite probies.

@@ TODO: When players join crew, prompt them to join the crew channel if they're not already on it.

&c.+crew/join [v(d.cg)]=$+crew/join *:@break strmatch(%0, *=*); @eval setq(R, search(EPLAYER=cand(t(member(ulocal(f.get-player-stat, ##, crew object), ##)), strmatch(ulocal(f.get-player-stat, ##, crew name), %0*)))); @assert t(%qR)={ @trigger me/tr.error=%#, Couldn't find a crew named '%0'.; }; @assert eq(words(%qR), 1)={ @trigger me/tr.error=%#, There are multiple crews that start with '%0': [itemize(iter(%qR, ulocal(f.get-player-stat, itext(0), crew name),, |), |)].; }; @eval setq(T, xget(%vD, d.crew-invitation-time)); @assert t(gettimer(%#, crew.invite-%qR))={ @trigger me/tr.error=%#, You have not been invited to join that crew within the last [secs2hrs(%qT)]. Message [ulocal(f.get-name, %qR, %#)] for an invitation.; }; @assert not(member(setr(C, ulocal(f.get-player-stat, %#, crew object)), %#))={ @assert not(t(setdiff(ulocal(f.get-crew-members, %qC), %#)))={ @trigger me/tr.error=%#, You have existing crew members. Before you can join another crew%, you need to %ch+crew/transfer <player>%cn control of your current crew to someone else. If all of your crew's members are probationary%, you can %ch+crew/boot <name>%cn instead%, but if any of them are approved%, the crew must be transferred.; }; @trigger me/tr.message=%#, This will take you out of your existing crew%, [ulocal(f.get-player-stat, %qC, Crew Name)]. If you're sure you want to proceed%, type '+crew/join %0=YES' within the next 15 minutes. The time is now [prettytime()].; @eval settimer(%#, crew.join, 900); }; @set %#=[ulocal(f.get-stat-location-on-player, crew object)]:%qR; @set %#=[ulocal(f.get-next-id-attr, %#, _crew-join-%qR-)]:[prettytime()]; @trigger me/tr.success=%#, You have joined the %ch[ulocal(f.get-player-stat, %qR, crew name)]%cn crew. [if(ulocal(f.is-crew-approved, %qC), Note that this joining is probationary.)];

&c.+crew/join_YES [v(d.cg)]=$+crew/join *=*:@assert gettimer(%#, crew.join)={ @trigger me/tr.error=%#, Your timeout has expired or you didn't type '+crew/join %0' yet. Please try again.; }; @assert t(match(%1, YES))={ @trigger me/tr.error=%#, You must type 'YES' to proceed with leaving your old crew.; }; @eval setq(R, search(EPLAYER=cand(t(member(ulocal(f.get-player-stat, ##, crew object), ##)), strmatch(ulocal(f.get-crew-name, ##), %1*)))); @assert t(%qR)={ @trigger me/tr.error=%0, Couldn't find a crew named '%1'.; }; @assert eq(words(%qR), 1)={ @trigger me/tr.error=%#, There are multiple crews that start with '%0': [itemize(iter(%qR, ulocal(f.get-crew-name, itext(0)),, |), |)].; }; @set %#=[ulocal(f.get-stat-location-on-player, crew object)]:%qR; @set %#=[ulocal(f.get-next-id-attr, %#, _crew-join-%qR-)]:[prettytime()]; @trigger me/tr.success=%#, You have joined the %ch[ulocal(f.get-crew-name, %qR)]%cn crew. [if(ulocal(f.is-crew-approved, %qR), Note that this joining is probationary.)];

&c.+crew/boot [v(d.cg)]=$+crew/boot *:@eval setq(C, ulocal(f.get-player-stat, %#, crew object)); @assert ulocal(f.is-full-member, %#, %qC)={ @trigger me/tr.error=%#, You must be a full member of the crew in order to perform boots. You can ask staff to intervene with %chreq/social <title>=<problem>%cn.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @assert t(setinter(ulocal(f.get-crew-members, %qC), %qP))={ @trigger me/tr.error=%#, ulocal(f.get-name, %qP, %#) is not a member of [ulocal(f.get-crew-name, %qC)].; }; @assert cor(ulocal(f.is-probationary-member, %qP, %qC), not(ulocal(f.is-crew-approved, %qC)))={ @trigger me/tr.error=%#, [ulocal(f.get-name, %qP, %#)] is a full member of your crew and cannot be booted without staff assistance. Please reach out to staff with %chreq/social <title>=<problem>%cn.; }; @set %qP=ulocal(f.get-stat-location-on-player, crew object):; @trigger me/tr.crew-emit=cat(alert(Crew), ulocal(f.get-name, %#), booted, ulocal(f.get-name, %qP) from the crew.); @trigger me/tr.success=%#, You have booted [ulocal(f.get-name, %qP, %#)] from your crew.; @trigger me/tr.msg; [capstr(subj(%qP))] [plural(%qP, has, have)] not been informed%, so you should let [obj(%qP)] know. If some form of harassment has taken place%, please report it to staff with %chreq/social <title>=<problem>%cn.;

&c.+crew/leave [v(d.cg)]=$+crew/leave:@assert t(setr(C, ulocal(f.get-player-stat, %#, crew object)))={ @trigger me/tr.error=%#, You don't appear to be in a crew.; }; @assert not(isapproved(%#))={ @trigger me/tr.error=%#, You're already approved and can't leave your crew without staff assistance. Please reach out to staff with %chreq/social <title>=<problem>%cn. Alternately%, you can try joining a new crew.; }; @set %#=ulocal(f.get-stat-location-on-player, crew object):; @trigger me/tr.success=%#, You have left your old crew.;

&layout.crew-invitation [v(d.cgf)]=cat(You have been invited to join, setr(0, ulocal(f.get-player-stat, %0, crew name)), by, ulocal(f.get-name, %0, %1)., To accept this invitation%, type %ch+crew/join %q0., This invitation is good for, secs2hrs(xget(%vD, d.crew-invitation-time)).)

&c.+crew/invite [v(d.cg)]=$+crew/invite *:@eval setq(C, ulocal(f.get-player-stat, %#, crew object)); @assert t(%qC)={ @trigger me/tr.error=%#, You don't currently have a crew set up. +crew/create <name> to start one.; }; @assert t(member(%qC, %#))={ @trigger me/tr.error=%#, You must be the crew's statter in order to invite people. Message [ulocal(f.get-name, %qR, %#)] to issue the invitation.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @assert not(t(setinter(ulocal(f.get-crew-members, %qC), %qP)))={ @trigger me/tr.error=%#, ulocal(f.get-name, %qP, %#) is already a member of [ulocal(f.get-player-stat, %qC, crew name)].; }; @eval settimer(%qP, crew.invite-%qC, setr(D, xget(%vD, d.crew-invitation-time))); @trigger me/tr.success=%#, You have issued an invitation to [ulocal(f.get-name, %qP, %#)] to join [ulocal(f.get-player-stat, %qC, crew name)]. This invitation is good for [secs2hrs(%qD)].; @break t(member(xget(%vD, d.message-method), msg))={ @set %#=msg-send-crew_invitation:[default(%#/msg-send-crew_invitation, xget(%vD, d.crew_invitation_flair))]; @trigger me/tr.msg-player=crew_invitation, %qP=:sends: [ulocal(layout.crew-invitation, %qC, %qP)], %#; }; @assert andflags(%qP, C!D)={ @mail/quick %qP/Crew Invitation: [ulocal(f.get-player-stat, %qC, crew name)]=[ulocal(layout.crew-invitation, %0, %qP)]; }; @trigger me/tr.pemit=%qP, ulocal(layout.crew-invitation, %0, %qP), %#;


@@ Warning: Transferring will fuck up any issued invitations. May need to reissue or remove those.
&c.+crew/transfer [v(d.cg)]=$+crew/transfer *:@break strmatch(%0, *=*); @pemit %#=Crew owner transfers ownership of the crew to someone else.;
+crew/transfer asdf

&c.+crew/transfer_staff [v(d.cg)]=$+crew/transfer *=*: think Staff transfers ownership of a crew to someone else.; @trigger me/tr.success=%#, ;

@@ TODO: +crew/lock

&c.+crew/lock [v(d.cg)]=$+crew/lock:@eval setq(C, ulocal(f.get-player-stat, %#, crew object)); @assert t(%qC)={ @trigger me/tr.error=%#, You don't currently have a crew set up. +crew/create <name> to start one.; }; @assert not(hasattr(%qC, _stat.crew_locked))={ @trigger me/tr.error=%#, Your crew is already locked.; }; @set %qC=_stat.crew_locked:[time()]; @dolist/delimit | [xget(%vD, d.crew-stats-that-default)]={ @set %qC=[ulocal(f.get-stat-location-on-player, ##)]:[ulocal(f.get-player-stat, %qC, ##)]; }; @set %qC=ulocal(f.get-stat-location-on-player, crew coin):[sub(2, ulocal(f.get-total-faction-coin, %qC))]; @set %qC=ulocal(f.get-stat-location-on-player, heat):0; @set %qC=ulocal(f.get-stat-location-on-player, vaults):0; @set %qC=ulocal(f.get-stat-location-on-player, wanted level):0; @set %qC=ulocal(f.get-stat-location-on-player, xp.crew.max):10; @trigger me/tr.success=%#, You locked your crew.;

@@ TODO: see how this works out. It sets the crew channel up ONCE... unless the original no longer exists. If the original gets deleted, the crew can assign a new one. Otherwise, they'll have to ask staff.

&c.+crew/channel [v(d.cg)]=$+crew/channel *:@break strmatch(%0, *=*); @eval setq(C, ulocal(f.get-player-stat, %#, crew object)); @assert t(%qC)={ @trigger me/tr.error=%#, You don't currently have a crew set up. +crew/create <name> to start one.; }; @assert cor(not(t(setr(O, xget(%qC, setr(L, ulocal(f.get-stat-location-on-player, crew channel object)))))), not(isdbref(%qO)))={ @trigger me/tr.error=%#, Your crew already has a crew channel. You'll need to get  with staff to change it.; }; @assert not(t(setr(E, u(v(d.channel-functions)/f.get-channel-by-name-error, %#, %0, 1))))={ @trigger me/tr.error=%#, %qE; }; @assert ulocal(v(d.channel-functions)/f.can-modify-channel, %#, %qN)={ @trigger me/tr.error=%#, You are not in control of %qT%, so you can't set it as your crew channel. Get the channel owner to do it or talk to staff.; }; @set %qC=%qL:%qN; @set %qC=[ulocal(f.get-stat-location-on-player, crew channel name)]:%qT; @trigger me/tr.success=%#, You set your crew's channel to %qT. New players will be prompted to join that channel when they join your crew.; @cemit %qT=alert(Crew) This channel is now the designated channel for %ch[ulocal(f.get-player-stat, %qC, crew name)]%cn.;

&c.+crew/channel_staff [v(d.cg)]=$+crew/channel *=*:@assert isstaff(%#)={ @trigger me/tr.error=%#, You must be staff to change a crew's channel.; }; @assert t(setr(P, ulocal(f.find-player, %0, %#)))={ @trigger me/tr.error=%#, Could not find a player named '%0'.; }; @eval setq(C, ulocal(f.get-player-stat, %qP, crew object)); @assert t(%qC)={ @trigger me/tr.error=%#, ulocal(f.get-name, %qP, %#) doesn't currently have a crew set up.; }; @assert not(t(setr(E, u(v(d.channel-functions)/f.get-channel-by-name-error, %#, %1, 0))))={ @trigger me/tr.error=%#, %qE; }; @assert ulocal(v(d.channel-functions)/f.can-modify-channel, %#, %qN)={ @trigger me/tr.error=%#, You are not in control of %qT%, so you can't set it as someone's crew channel.; }; @set %qC=[ulocal(f.get-stat-location-on-player, crew channel object)]:%qN; @set %qC=[ulocal(f.get-stat-location-on-player, crew channel name)]:%qT; @trigger me/tr.success=%#, You set the crew channel for %ch[ulocal(f.get-player-stat, %qC, crew name)]%cn to %qT. New players will be prompted to join that channel when they join the crew.; @cemit %qT=alert(Crew) This channel is now the designated channel for %ch[ulocal(f.get-player-stat, %qC, crew name)]%cn.;

@@ %0: crew object
@@ %1: what to emit
&tr.crew-emit [v(d.cg)]=@assert t(setr(N, ulocal(f.get-player-stat, %0, crew channel name))); @cemit %qN=%1;
